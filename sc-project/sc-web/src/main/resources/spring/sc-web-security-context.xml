<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- <debug /> -->

    <global-method-security pre-post-annotations="enabled" />

    <http use-expressions="true">
        <intercept-url pattern="/admin/**" access="hasRole('admin')"/>
        <intercept-url pattern="/students/**" access="isAuthenticated()" />
        <!--
             Allow all other requests. In a real application you should
             adopt a whitelisting approach where access is not allowed by default
          -->
        <intercept-url pattern="/**" access="permitAll" />
        <form-login login-page="/login.jsp" authentication-failure-url="/login.jsp?login_error=1"/>
        <logout logout-url="/logout" delete-cookies="JSESSIONID"/>
        <remember-me />
    </http>

    <beans:bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <beans:bean id="userDetailsService" class="ru.spbstu.sc.services.UserDetailsServiceImpl"/>

    <authentication-manager>
        <authentication-provider user-service-ref="userDetailsService">
           <password-encoder ref="encoder"/>
        </authentication-provider>
    </authentication-manager>

</beans:beans>
